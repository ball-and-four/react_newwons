# org레포지토리에서 fork해온 현 레포지토리를 최신상태로 fetch and merge하는 스크립트입니다.

name: Sync and merge upstream repository
on:
  workflow_dispatch:
  schedule: 
  - cron: "0 8 * * *" #Runs at 8:00 UTC(5:00 in Korea) every day.

jobs:
  merge:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Merge upstream
        run: |
          git config --global user.name 'gimtwinkle'
          git config --global user.email 'gimtwinkle@gmail.com'
          # "git checkout master" is unnecessary, already here by default
          git pull --unshallow  # this option is very important, you would get
                                # complains about unrelated histories without it.
                                # (but actions/checkout@v2 can also be instructed
                                # to fetch all git depth right from the start)
          git remote add upstream https://github.com/ball-and-four/react_newwons.git
          git fetch upstream
          git checkout master
          git merge -Xtheirs upstream/master
          git push origin master
          # etc

# name: Deploy

# on:
#   push:
#     branches: ['dev']

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     container: pandoc/latex

#     steps:
#       - uses: actions/checkout@v4

#       - name: Install mustache (to update the date)

#         run: apk add ruby && gem install mustache

#       - name: creates output

#         run: sh ./build.sh

#       - name: Pushes to another repository

#         id: push_directory

#         uses: cpina/github-action-push-to-another-repository@main

#         env:
#           API_TOKEN_GITHUB: ${{ secrets.REACT_NEWWONS_TOKEN }}

#         with:
#           source-directory: 'output'

#           destination-github-username: gimtwinkle

#           destination-repository-name: react_newwons

#           user-email: ${{ secrets.EMAIL }}

#           commit-message: ${{ github.event.commits[0].message }}

#           target-branch: dev

#       - name: Test get variable exported by push-to-another-repository

#         run: echo $DESTINATION_CLONED_DIRECTORY
